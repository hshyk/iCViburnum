<?php

namespace AppBundle\Repository\iCViburnum;

use Doctrine\ORM\Query\Expr\Join;

/**
 * OrganismRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrganismRepository extends \Doctrine\ORM\EntityRepository
{
	public function findAllIDs() {
		return $this
			->createQueryBuilder("o")
			->select("o.id")
			->getQuery()
		    ->getScalarResult();
	}
	
	public function findByURL($url) {
		return $this
			->createQueryBuilder("o")
			->where("o.url = :url")
			->setParameter("url", $url)
			->getQuery()
			->setMaxResults(1)
			->useQueryCache(true)
			->useResultCache(true)
			->getOneOrNullResult();
	}
	
	public function findAllByLocation($latitude, $longitude, $offset = 0, $limit = 10)
	{
	    $rsm = new \Doctrine\ORM\Query\ResultSetMapping();
	    $rsm->addEntityResult('AppBundle\Entity\iCViburnum\Organism', 'o');
	    $rsm->addFieldResult('o', 'id', 'id');
	    $rsm->addFieldResult('o', 'url', 'url');
	    $sql = "
WITH RECURSIVE 
    parent_region 
AS (
    SELECT
        id, 
        parentid
    FROM 
        gadm
    WHERE 
        id IN (
	          SELECT
		            g.id
	          FROM
		            organisms o
	          INNER JOIN
  		          organismgadms og
	          ON
		            o.id = og.organism_id
	          INNER JOIN
		            gadm g
	          ON
		            og.gadm_id = g.id
	          WHERE
		            ST_Contains (
				            g.geom,
			              ST_PointFromText(
					               ?,
					               4326
			              )	
		            ) = true
        )
    UNION ALL
    SELECT
        parent.id,
        parent.parentid
    FROM
        gadm parent
    JOIN
        parent_region child
    ON
        parent.id = child.parentid    
)
SELECT 
	o.id,
	o.url
FROM 
	parent_region pr
INNER JOIN
	organismgadms og
ON
	pr.id = og.gadm_id
INNER JOIN
	organisms o
ON
	og.organism_id = o.id
ORDER BY
	o.url
LIMIT
	?
OFFSET
	 ?";
	    return $this->_em->createNativeQuery($sql, $rsm)
	    ->setParameter(1,'POINT('.$longitude.' '.$latitude.')')
	    ->setParameter(2, $limit)
	    ->setParameter(3, $offset)
	    ->getResult();
	}
	
	public function findAllByRegions($regions, $offset = 0, $limit = 10)
	{
	    $rsm = new \Doctrine\ORM\Query\ResultSetMapping();
	    $rsm->addEntityResult('AppBundle\Entity\iCViburnum\Organism', 'o');
	    $rsm->addFieldResult('o', 'id', 'id');
	    $rsm->addFieldResult('o', 'url', 'url');
	    $sql = "
WITH RECURSIVE
    up_region 
AS (
	SELECT 
	   id,
	   parentid
    FROM
	   gadm
	WHERE
	   id = ?
    UNION ALL
    SELECT
        parent.id,
        parent.parentid
    FROM
        gadm parent
    JOIN
        up_region child
    ON
        parent.id = child.parentid  
), 
    down_region
AS (
 SELECT
    id,
    parentid
    FROM
    gadm
 WHERE
    id = ?
    UNION ALL
    SELECT
        child.id,
        child.parentid
    FROM
        gadm child
    JOIN
        down_region parent
    ON
        parent.id = child.parentid
)
SELECT 
	DISTINCT(o.id),
	o.url
FROM
	organisms o
INNER JOIN
	organismgadms og
ON
	o.id = og.organism_id
INNER JOIN
(
    SELECT
        id
    FROM
         down_region child
    UNION ALL
	SELECT 
		id 
	FROM
		up_region parent
) g
ON
	og.gadm_id = g.id
LIMIT
     ?
OFFSET
     ?
";

	    if (count($regions) > 1) {
	       $last_region =  array_pop($regions);
	    }
	    else {
	       $last_region = $regions[0];
	    }

	    $query = $this->_em->createNativeQuery($sql, $rsm);
	    $query->setParameter(1, $last_region);
	    $query ->setParameter(2, $last_region);
	    $query->setParameter(3, $limit);
	    $query->setParameter(4, $offset);
	    return $query->getResult();	
	}
	
	public function findAllByDescription($states, $values, $offset = 0, $limit = 10)
	{
	   $stateQuery = $this
	       ->getEntityManager()
	       ->getRepository('AppBundle\Entity\iCViburnum\State')
	       ->findBy(array('id' => $states));
	   
	   $totalText = "";
	   for($total = 1; $total <= count($stateQuery); $total++) {
	       $totalText .= " COALESCE(o".$total.".exists, 0) +";
	   }

	   $totalText = "(".rtrim($totalText, "+").")";

	    $rsm = new \Doctrine\ORM\Query\ResultSetMapping();
	    $rsm->addEntityResult('AppBundle\Entity\iCViburnum\Organism', 'o');
	    $rsm->addFieldResult('o', 'id', 'id');
	    $rsm->addFieldResult('o', 'url', 'url');
	    $sql = "
SELECT
	o.id,
	o.url,
	".$totalText." as total
FROM
	organisms o
";
	    $oCount = 1;
        foreach($stateQuery as $state) {
	       $sql .= "
LEFT JOIN
(	
	SELECT
		o.id,
		o.url, 
		COUNT(*) AS exists
	FROM
		organisms o 
	INNER JOIN
		organismstates os
	ON
		o.id = os.organism_id
	INNER JOIN
		states s
	ON
		os.state_id = s.id
	WHERE
		s.id = ? 
";
	       if ($state->getCharacter()->getIsNumeric()) {
	           $sql .= "
    AND
	   ? BETWEEN os.low_value AND os.high_value 
";
	       }	       
	       $sql .= "
	GROUP BY
		o.id
) o".$oCount."
ON
	o.id = o".$oCount.".id    
";
	       $oCount++;
        }
        
        $sql .= "
ORDER BY
    total DESC,
    url ASC
LIMIT
     ?
OFFSET
     ?	
";
        
        $query = $this->_em->createNativeQuery($sql, $rsm);
        
        $x = 1;
        foreach($stateQuery as $state) {
            $id = $state->getId();
            
            $query->setParameter($x, $id);
            $x++;
            
            if ($state->getCharacter()->getIsNumeric()) {
                $query->setParameter($x, $values[$id]);
                $x++;
            }
        }

        $query->setParameter($x, $limit);
        $x++;
        
        $query->setParameter($x, $offset);
        
        return $query->getResult();
	}
	
    public function findAllByUser($user_id) {
        return $this
            ->createQueryBuilder("og")
            ->innerJoin("og.observations", "ob")
            ->where("ob.userId = :user_id")
            ->setParameter("user_id", $user_id)
            ->getQuery()
            ->getResult();
    }
}
