<?php

namespace AppBundle\Repository\VirtualViburnum;

use AppBundle\Entity\VirtualViburnum\TaxonStatus;

/**
 * TaxonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaxonRepository extends \Doctrine\ORM\EntityRepository
{	
	public function findAllByNotIDs($ids)
	{
        $qb = $this->createQueryBuilder('t');
		return $qb
			->join('t.taxonStatus', 'ts')
		    ->where('ts.statusName = :status')
			->andWhere($qb->expr()->notIn('t.taxaId', $ids))
			->setParameter('status', TaxonStatus::ACCEPTED)
			->getQuery()
			->getResult();
	}
	
	private function byName($name)
	{
	    return $this->createQueryBuilder('t')
    	    ->join('t.taxonStatus', 'ts')
    	    ->leftJoin('t.specimens', 's')
    	    //->leftJoin('s.images', 'i')
    	    ->where('ts.statusName = :status')
    	    ->andWhere('t.scientificName LIKE :name')
    	    ->addOrderBy('t.scientificName', 'ASC')
    	    ->setParameter('status', TaxonStatus::ACCEPTED)
    	    ->setParameter('name', '%'.$name.'%');
	}
	
	public function findAllByName($name, $offset = 0, $limit = 10) 
	{
	    return $this->byName($name) 
		    ->setMaxResults($limit)
		    ->setFirstResult($offset * $limit)
		    ->getQuery()
		    ->getResult();
	}
	
	public function findAllByNameCount($name)
	{
	    return $this->byName($name)
    	    ->select($this->createQueryBuilder('t')->expr()->count('t.taxaId'))
    	    ->getQuery()
    	    ->getSingleScalarResult();
	}
	
	public function findAll() 
	{
	    return $this->createQueryBuilder('t')
	       ->join('t.taxonStatus', 'ts')
	       ->where('ts.statusName = :status')
	       ->setParameter('status', TaxonStatus::ACCEPTED)
	       ->getQuery()
	       //->useQueryCache(true)
	       //->useResultCache(true)
	       ->getResult();
	}
	
	
}
