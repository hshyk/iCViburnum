<?php

namespace AppBundle\Repository\VirtualViburnum;

use AppBundle\Entity\VirtualViburnum\TaxonStatus;
use AppBundle\Entity\VirtualViburnum\BasisOfRecord;
use AppBundle\Entity\VirtualViburnum\ImageRank;

/**
 * TaxonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaxonRepository extends \Doctrine\ORM\EntityRepository
{	
	public function findAllByNotIDs($ids)
	{
        $qb = $this->createQueryBuilder('t');
		return $qb
			->join('t.taxonStatus', 'ts')
		    ->where('ts.statusName = :status')
			->andWhere($qb->expr()->notIn('t.taxaId', $ids))
			->setParameter('status', TaxonStatus::ACCEPTED)
			->getQuery()
			->getResult();
	}
	
	public function findAllByName($name, $offset = 0, $limit = 10) 
	{
	    return $this->createQueryBuilder('t')
    	    ->join('t.taxonStatus', 'ts')
    	    ->where('ts.statusName = :status')
    	    ->andWhere('t.scientificName LIKE :name')
    	    ->addOrderBy('t.scientificName', 'ASC')
    	    ->setParameter('status', TaxonStatus::ACCEPTED)
    	    ->setParameter('name', '%'.$name.'%')
		    ->setMaxResults($limit)
		    ->setFirstResult($offset * $limit)
		    ->getQuery()
		    ->getResult();
	}
	
	public function findAll() 
	{
	    return $this->createQueryBuilder('t')
	       ->join('t.taxonStatus', 'ts')
	       ->where('ts.statusName = :status')
	       ->setParameter('status', TaxonStatus::ACCEPTED)
	       ->getQuery()
	       //->useQueryCache(true)
	       //->useResultCache(true)
	       ->getResult();
	}
	
	private function getTaxaImages($taxaId)
	{
	    $qb = $this->createQueryBuilder('t');
	    return $qb
	    ->select(array('i.derivativePath','i.thumbPath'))
	    ->innerJoin('t.specimens', 's')
	    ->innerJoin('s.basisOfRecord', 'b')
	    ->innerJoin('s.images', 'i')
	    ->innerJoin('i.imagerank', 'ir')
	    ->where('t.taxaId = :taxaId')
	    ->andWhere($qb->expr()->in('b.value', array(BasisOfRecord::HUMAN_OBSERVATION, BasisOfRecord::PRESERVED_SPECIMEN)))
	    ->andWhere('ir.value = :imagerank')
	    ->setParameter('taxaId', $taxaId)
	    ->setParameter('imagerank',ImageRank::SPECIMEN_TAXA_IMAGE);
	}
	
	public function findPrimaryImage($taxaId)
	{
	    return $this->getTaxaImages($taxaId)
	       ->getQuery()
	       ->setMaxResults(1)
	       ->useQueryCache(true)
	       ->useResultCache(true)
           ->getResult();
	}
	
	public function findImages($taxaId)
	{
	    return $this->getTaxaImages($taxaId)
    	    ->getQuery()
    	    ->useQueryCache(true)
    	    ->useResultCache(true)
    	    ->getResult();
	}
	
	
}
